diff --git a/arch/x86/syscalls/syscall_32.tbl b/arch/x86/syscalls/syscall_32.tbl
index 9fe1b5d..d3ad8aa 100644
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@ -364,3 +364,6 @@
 355	i386	getrandom		sys_getrandom
 356	i386	memfd_create		sys_memfd_create
 357	i386	bpf			sys_bpf
+358     i386    get_unique_id           sys_get_unique_id
+359     i386    get_child_pids          sys_get_child_pids
+
diff --git a/arch/x86/syscalls/syscall_64.tbl b/arch/x86/syscalls/syscall_64.tbl
index 281150b..97a1090 100644
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@ -366,3 +366,5 @@
 542	x32	getsockopt		compat_sys_getsockopt
 543	x32	io_setup		compat_sys_io_setup
 544	x32	io_submit		compat_sys_io_submit
+545     x32     get_unique_id           sys_get_unique_id
+546     x32     get_child_pids          sys_get_child_pids
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index bda9b81..ae6faae 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -877,4 +877,8 @@ asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 asmlinkage long sys_getrandom(char __user *buf, size_t count,
 			      unsigned int flags);
 asmlinkage long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
+asmlinkage long sys_get_child_pids(pid_t* list,
+				   size_t limit,
+				   size_t* num_children);
+asmlinkage long sys_get_unique_id(int *uuid);
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index 17ea6d4..0a83d44 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -9,7 +9,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o groups.o smpboot.o
+	    async.o range.o groups.o smpboot.o get_unique_id.o get_child_pids.o
 
 ifdef CONFIG_FUNCTION_TRACER
 # Do not trace debug files and internal ftrace files
diff --git a/kernel/get_child_pids.c b/kernel/get_child_pids.c
new file mode 100644
index 0000000..399d12a
--- /dev/null
+++ b/kernel/get_child_pids.c
@@ -0,0 +1,57 @@
+#include<linux/linkage.h>
+#include<linux/sched.h>
+#include<linux/kernel.h>
+#include<linux/uaccess.h>
+#include<linux/slab.h>
+#include<linux/gfp.h>
+
+
+asmlinkage long sys_get_child_pids(pid_t* list, size_t limit, size_t* num_children)
+{
+    pid_t* tmpList = NULL;
+    pid_t* tmpListHead = NULL;
+    struct list_head *position = NULL;
+	struct task_struct *child = NULL;
+	int nbP = 0;
+    int returnVal = 0;
+    
+	if(list == NULL && limit != 0) {
+        return -EFAULT;
+	}
+	
+    tmpListHead = kmalloc(sizeof(pid_t) * limit, GFP_KERNEL);
+    if(tmpListHead == NULL && limit != 0) {
+        return -EFAULT;
+    }
+    
+    tmpList = tmpListHead;
+    read_lock(&tasklist_lock);
+	list_for_each(position, &current->children) {
+	    child = list_entry(position, struct task_struct, sibling);
+	    nbP++;
+	    if(nbP <= limit) {
+            *tmpList = child->pid;
+            tmpList++;            
+        } else {
+            returnVal = -ENOBUFS;
+        }
+    }
+    read_unlock(&tasklist_lock);
+    
+    if(put_user(nbP, num_children)){
+        return -EFAULT;
+    }
+   
+    tmpList = tmpListHead;
+    while(limit > 0) {
+        if(put_user(*tmpList, list)){
+            return -EFAULT;
+        }
+        tmpList++;
+        list++;
+        limit--;
+    }    
+	
+    kfree(tmpListHead);
+    return returnVal;
+}
\ No newline at end of file
diff --git a/kernel/get_unique_id.c b/kernel/get_unique_id.c
new file mode 100644
index 0000000..1bd4c67
--- /dev/null
+++ b/kernel/get_unique_id.c
@@ -0,0 +1,18 @@
+#include<linux/linkage.h>
+#include<linux/uaccess.h>
+#include<linux/types.h>
+
+atomic_t counter = ATOMIC_INIT(0);
+
+asmlinkage long sys_get_unique_id(int *uuid)
+{
+  long result;
+  result = put_user(atomic_read(&counter), uuid);
+    
+  // If the put_user succeeded, we increment the counter.
+  if (result == 0) {
+    atomic_inc(&counter);
+  }
+  
+  return result;
+}
\ No newline at end of file
